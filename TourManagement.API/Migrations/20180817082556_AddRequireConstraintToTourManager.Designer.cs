// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TourManagement.API.Services;

namespace TourManagement.API.Migrations
{
    [DbContext(typeof(TourManagementContext))]
    [Migration("20180817082556_AddRequireConstraintToTourManager")]
    partial class AddRequireConstraintToTourManager
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-rtm-30799");

            modelBuilder.Entity("TourManagement.API.Entities.Band", b =>
                {
                    b.Property<Guid>("BandId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<DateTime>("UpadatedOn");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("BandId");

                    b.ToTable("Bands");
                });

            modelBuilder.Entity("TourManagement.API.Entities.Manager", b =>
                {
                    b.Property<Guid>("ManagerId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("UpadatedOn");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("ManagerId");

                    b.ToTable("Managers");
                });

            modelBuilder.Entity("TourManagement.API.Entities.Show", b =>
                {
                    b.Property<Guid>("ShowId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<DateTimeOffset>("Date");

                    b.Property<Guid>("TourId");

                    b.Property<DateTime>("UpadatedOn");

                    b.Property<string>("UpdatedBy");

                    b.Property<string>("Venue")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.HasKey("ShowId");

                    b.HasIndex("TourId");

                    b.ToTable("Shows");
                });

            modelBuilder.Entity("TourManagement.API.Entities.Tour", b =>
                {
                    b.Property<Guid>("TourId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("BandId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description")
                        .HasMaxLength(2000);

                    b.Property<DateTimeOffset>("EndDate");

                    b.Property<decimal>("EstimatedProfits");

                    b.Property<Guid>("ManagerId")
                        .IsRequired();

                    b.Property<DateTimeOffset>("StartDate");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpadatedOn");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("TourId");

                    b.HasIndex("BandId");

                    b.HasIndex("ManagerId");

                    b.ToTable("Tours");
                });

            modelBuilder.Entity("TourManagement.API.Entities.Show", b =>
                {
                    b.HasOne("TourManagement.API.Entities.Tour", "Tour")
                        .WithMany("Shows")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TourManagement.API.Entities.Tour", b =>
                {
                    b.HasOne("TourManagement.API.Entities.Band", "Band")
                        .WithMany()
                        .HasForeignKey("BandId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TourManagement.API.Entities.Manager", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
